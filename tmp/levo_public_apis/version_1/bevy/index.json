{
  "meta": {
    "type": "folder",
    "parent_path": "test-debug/levo_public_apis/version_1"
  },
  "name": "Bevy",
  "description": "## Introduction to Collections with Levo\n\nIn the realm of APIs and data management, a **collection** serves as a fundamental entity for organizing and managing data. Much like how a form collects information from users or how a database organizes data records, a collection provides a structured approach to handle data within an application or system.\n\n### What is a Collection?\n\nA collection can be conceptualized as a container or repository that holds related data items. These data items, often referred to as documents or entries, share a common structure defined by the collection's schema or data model.\n\n### Similarities to Forms and Databases\n\n#### 1\\. Creation\n\nJust as a form provides fields for users to input data, a collection allows for the creation of new data entries. Users interact with the collection through an API, submitting data that conforms to the predefined schema.\n\n#### 2\\. Insertion\n\nOnce data is collected, it needs to be inserted into the appropriate storage medium. Similarly, data entered into a form is typically inserted into a database. In the context of collections, new documents are inserted into the collection, becoming part of the dataset.\n\n#### 3\\. Updating\n\nData is dynamic and subject to change over time. Collections support updating existing documents, enabling modifications to stored information. This process mirrors updating records within a database or editing entries within a form.\n\n#### 4\\. Removal\n\nWhen data becomes obsolete or irrelevant, it may need to be removed from the system. Collections support the removal of documents, ensuring data integrity and managing resource usage. This functionality aligns with deleting records from a database or clearing entries from a form.\n\n### Simplified Collection Management with Levo\n\n**Levo** offers a user-friendly Dashboard interface that simplifies the process of creating your own collections. From the Dashboard, users can easily define the structure and properties of their collections using intuitive tools and templates. Levo streamlines the setup process, allowing developers to focus on building their applications rather than dealing with complex backend configurations.\n\n### Example\n\nWe will create a \"Podcast\" collection from the Levo Dashboard, and use it throughout our API Examples.\n\n<img src=\"https://content.pstmn.io/d7e36ca5-d5d0-467e-a465-2df0b4d545ac/U2NyZWVuc2hvdCBmcm9tIDIwMjQtMDUtMDkgMTYtMjMtMjkucG5n\">\n\nThe above collection when rendered as a form will look like this:\n\n<img src=\"https://content.pstmn.io/83d71da1-1c38-49b0-b86e-c8fe837f2525/U2NyZWVuc2hvdCBmcm9tIDIwMjQtMDUtMDkgMTYtMjctMzIucG5n\">\n\n## Entry in a Collection\n\nTo create an entry in a collection, you need to provide data for each field based on its `kind`. The `kind` specifies the type of data that the field should contain. Below are the available kinds and their corresponding widgets for data input:\n\n- `string` - The field should be of the type string.\n- `array-string` - The field should be of the type array of strings.\n- `number` - The field should be of the type number.\n- `date` - The field should be of the string that is a valid date in the ISO Format.\n- `boolean` - The field should be of the type boolean.\n- `file` - The field should be of the type file that is uploaded and received from Levo Upload. The basic field required in this case is `location` which is the URL of the file.\n- `array-file` - The field should be of the type array of files that are uploaded and received from Levo Upload. The basic field required in this case is `location` which is the URL of the file.\n- `record` - Collection of fields that can be used to create a nested structure of data\n- `group` - Collection of fields that can be used to create an array of nested structure of data\n- `location` - Field expects data mirroring the Google Map response, but is not strictly adhering to that. The only field that should be provided if this field is required is `place_name`\n    \n\n### String (`string`)\n\n**Text**\n\nThe field should be of type string. For simple text input.  \nWidgets available for this - Text, Paragraph, Email, Phone, Currency\n\n**Richtext**\n\nThe field should support rich text formatting.  \nWidgets available for this - Richtext\n\n**Radio**\n\nThe field should allow selecting a single option from predefined choices.  \nWidgets available for this - Radio\n\n**Dropdown**\n\nThe field should allow selecting a single option from a dropdown menu.  \nWidgets available for this - Dropdown\n\nConsider a collection with the following fields:\n\n``` json\n{\n    \"name\": \"Text\",\n    \"email\": \"Email\",\n    \"bio\": \"Richtext\",\n    \"gender\": \"Radio\",\n    \"country\": \"Dropdown\"\n}\n\n ```\n\nTo create an entry in this collection, you would provide data for each field based on its kind. For example:\n\n``` json\n{\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"bio\": \"<p class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27; class=&#x27;preserveHtml&#x27;>This is a sample bio.</p>\",\n    \"gender\": \"Male\",\n    \"country\": \"United States\"\n}\n\n ```\n\nIn this example, the `name` and `email` fields are of type string, so they are filled with simple text input. The `bio` field supports rich text formatting, so it is filled with HTML content. The `gender` field is a radio button, so one option is selected from the predefined choices. The `country` field is a dropdown menu, so one option is selected from the available countries.\n\n### Array of Strings (`array-string`)\n\n**Checkbox**  \nThe field should allow selecting multiple options from predefined choices.\n\n**Multi-Dropdown**  \nThe field should allow selecting multiple options from predefined choices.\n\nLet's consider adding a field for multiple names:\n\n``` json\n{\n    \"names\": \"array-string\"\n}\n\n ```\n\nTo create an entry with multiple names in this collection, you would provide an array of strings for the names field. For example:\n\n``` json\n{\n    \"names\": [\"John Doe\", \"Jane Smith\", \"Alice Johnson\"]\n}\n\n ```\n\nIn this example, the `names` field is an array of strings, so multiple names are provided as an array of strings.\n\n### Number (`number`)\n\n**Number**: The field should be of type number. For numerical values.\n\nLet's consider adding a field for the age of the person in the collection:\n\n``` json\n{\n    \"age\": \"number\"\n}\n\n ```\n\nTo create an entry with the age in this collection, you would provide a numerical value for the age field. For example:\n\n``` json\n{\n    \"age\": 30\n}\n\n ```\n\nIn this example, the `age` field is of type number, so a numerical value is provided for the age.\n\n### Date (`date`)\n\n**Date**: The field should be a string representing a valid date in ISO format, it is generally used for date of birth, date of joining, etc.\n\n**DateTime**: The field should be a string representing a valid date in ISO format, it is generally used for date and time of an event, etc.\n\nLet's consider adding a field for the date of birth (DOB) of the person in the collection:\n\n``` json\n{\n    \"dob\": \"date\"\n}\n\n ```\n\nTo create an entry with the date of birth in this collection, you would provide a string representing a valid date in ISO format for the dob field. For example:\n\n``` json\n{\n    \"dob\": \"2020-08-11T00:00:00Z\"\n}\n\n ```\n\nIn this example, the dob field is of type date, so it is filled with a string representing a valid date in ISO format.\n\n### Boolean (`boolean`)\n\n**Switch**: The field should be of type boolean. For true/false values.\n\nLet's consider adding a field to indicate whether a user is active in the collection:\n\n``` json\n{\n    \"is_active\": \"boolean\"\n}\n\n ```\n\nIn this example, the is_active field is of type boolean, so it is filled with either true or false.\n\n### File (`file`)\n\n**Image**: The field should be of type file that is uploaded and received from Levo Upload. The basic field required in this case is `location` which is the URL of the file.\n\nLet's consider adding a field for a cover image in the collection. There are two scenarios: self-upload and Levo Upload.\n\n#### Self-Upload Example:\n\n``` json\n{\n    \"cover_image\": {\n        \"location\": \"https://example.com/image.jpg\"\n    }\n}\n\n ```\n\nIn this example, the cover_image field is of type file, and the image is self-uploaded. The location field contains the URL of the uploaded image.\n\n#### Levo Upload Example:\n\n``` json\n{\n{\n    \"cover_image\": {\n        \"id\": \"JyOazEtP2HqPl\",\n        \"location\": \"https://space.levo.so/WD4RLK2Q/mqdefault-ximoeCAMljB1c.jpg\",\n        \"mimetype\": \"image/jpeg\",\n        \"kind\": \"image\",\n        \"srcset\": {\n            \"1080w\": \"https://space.levo.so/WD4RLK2Q/mqdefault-ximoeCAMljB1c-1080w.webp\",\n            ...\n        }\n    }\n}\n\n ```\n\nIn this example, the `cover_image` field is of type file, and the image is uploaded via Levo Upload. The object contains additional metadata such as `id`, `mimetype`, `kind`, and `srcset` which provide information about the uploaded image.\n\n### Array of Files (`array-file`)\n\n**Multi-Image**: The field should be of type array of files that are uploaded and received from Levo Upload. The basic field required in this case is `location` which is the URL of the file.\n\nLet's consider adding a field for multiple photos in the collection. Similar to the previous file example, there are two scenarios: self-upload and Levo Upload.\n\n#### Self-Upload Example:\n\n``` json\n{\n    \"photos\": [\n        {\n            \"location\": \"https://example.com/image.jpg\"\n        },\n        {\n            \"location\": \"https://example.com/image.jpg\"\n        }\n    ]\n}\n\n ```\n\nIn this example, the photos field is an array of files, and each image is self-uploaded. Each object within the array contains the location field with the URL of the uploaded image.\n\n#### Levo Upload Example:\n\n``` json\n{\n    \"photos\": [\n        {\n            \"id\": \"JyOazEtP2HqPl\",\n            \"location\": \"https://space.levo.so/WD4RLK2Q/mqdefault-ximoeCAMljB1c.jpg\",\n            \"mimetype\": \"image/jpeg\",\n            \"kind\": \"image\",\n            \"srcset\": {\n                \"1080w\": \"https://space.levo.so/WD4RLK2Q/mqdefault-ximoeCAMljB1c-1080w.webp\",\n                ...\n            }\n        },\n        {\n            \"id\": \"JyOazEtP2HqPl\",\n            \"location\": \"https://space.levo.so/WD4RLK2Q/mqdefault-ximoeCAMljB1c.jpg\",\n            \"mimetype\": \"image/jpeg\",\n            \"kind\": \"image\",\n            \"srcset\": {\n                \"1080w\": \"https://space.levo.so/WD4RLK2Q/mqdefault-ximoeCAMljB1c-1080w.webp\",\n                ...\n            }\n        }\n    ]\n}\n\n ```\n\nIn this example, the photos field is an array of files uploaded via Levo Upload. Each object within the array contains additional metadata such as `id`, `mimetype`, `kind`, and `srcset` providing information about the uploaded image.\n\n### Record (`record`)\n\n**Record**: Record is a collection of fields that can be used to create a nested structure of data.\n\nLet's consider adding a field for a speaker in the collection, which includes nested fields such as name and age:\n\n``` json\n{\n    \"speaker\": \"record\"\n}\n\n ```\n\nIn this example, the speaker field is of type record, allowing for a nested structure of data. You can then include fields within the speaker record, such as name and age, with their respective data types. For example:\n\n``` json\n{\n    \"speaker\": {\n        \"name\": \"John Doe\",\n        \"age\": 30\n    }\n}\n\n ```\n\nIn this example, the speaker field contains a nested structure with the name \"John Doe\" and age 25.\n\n### Group (`group`)\n\n**Group**: Group is a collection of fields that can be used to create an array of nested structures of data.\n\nLet's consider adding a field for multiple speakers in the collection, where each speaker includes nested fields such as name and age:\n\n``` json\n{\n    \"speakers\": \"group\"\n}\n\n ```\n\nIn this example, the speakers field is of type group, allowing for an array of nested structures of data. You can then include multiple groups of fields within the speakers group, each representing a speaker with fields such as name and age. For example:\n\n``` json\n{\n    \"speakers\": [\n        {\n            \"name\": \"John Doe\",\n            \"age\": 30\n        },\n        {\n            \"name\": \"Jane Smith\",\n            \"age\": 25\n        }\n    ]\n}\n\n ```\n\nIn this example, the speakers field contains an array of nested structures, with each element representing a speaker with a name and age.\n\n### Location (`location`)\n\n**Location**: Field expects data mirroring the Google Map response, but is not strictly adhering to that. The only field that should be provided if this field is required is `place_name`\n\nLet's consider adding a field for the location of an event in the collection:\n\n``` json\n{\n    \"event_location\": \"location\"\n}\n\n ```\n\nIn this example, the event_location field is of type location, allowing for location data. The only field required in this case is place_name, which is the name of the location. For example:\n\n``` json\n{\n    \"event_location\": {\n        \"place_name\": \"Levo HQ, San Francisco\"\n    }\n}\n\n ```\n\nIn this example, the event_location field contains the location data for the event, with the place_name \"Levo HQ, San Francisco\".\n\nUsing the data from Google Map API response, the location field can contain additional information such as latitude, longitude, address, etc. based on the requirements of the application.\n\n``` json\n{\n    \"event_location\": {\n        \"place_id\": \"ChIJtY4cqeWAhYARZ5N1g6Zn3Bw\",\n        \"place_name\": \"Levo HQ, San Francisco\",\n        \"latitude\": 37.7749,\n        \"longitude\": -122.4194,\n        \"address\": \"123 Main St, San Francisco, CA\"\n    }\n}\n\n ```\n\n## More Kinds and Widgets\n\nThere are more kinds available in Levo that can be used to create a variety of data structures, but **only available on request**. Some of the additional widgets include:\n\n- Collection (`string` / `array-string`) - For selecting an entry from a connected collection (e.g.: Connecting `category` to a `post`)\n- Slug (`string`) - For creating a URL-friendly version of a string\n- Time (`date`) - For selecting a time value\n- Document Upload (`file`) - For uploading files\n- Multi-Document Upload (`array-file`) - For uploading files\n- Video Upload (`file`) - For uploading videos\n- Multi Video Upload (`array-file`) - For uploading videos\n- Text Slider (`string`) - For selecting a value from a range using a slider\n- Range Slider (`number`) - For selecting a range of values using a slider\n    \n\n## Summary\n\nBy providing data for each field based on its kind, you can create an entry in a collection with the required information. The kind specifies the type of data that the field should contain, and the widgets available for data input depend on the kind of the field.",
  "order": [
    "content"
  ]
}